#import:
#  - /path/to/alacritty.yml

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty itself.
#env:
  # TERM variable
  #
  # This value is used to set the `$TERM` environment variable for
  # each instance of Alacritty. If it is not present, alacritty will
  # check the local terminfo database and use `alacritty` if it is
  # available, otherwise `xterm-256color` is used.
  #TERM: alacritty

background_opacity: 0.95

window:
  padding:
    x: 8
    y: 8
  opacity: 0.95
  #title: Alacritty
  #dynamic_title: true
  class:
    # Application instance name
    instance: Alacritty
    # General application class
    general: Alacritty
  # Override the variant of the GTK theme. Commonly supported values are `dark`
  # and `light`. Set this to `None` to use the default theme variant.
  #gtk_theme_variant: None

scrolling:
  history: 10000
  multiplier: 3

font:
  normal:
    family: Hack Nerd Font
    style: Regular
  bold:
    family: Hack Nerd Font
    style: Bold
  italic:
    family: Hack Nerd Font
    style: Italic
  bold_italic:
    family: Hack Nerd Font
    style: Bold Italic
  size: 11.0
  
  offset:
    x: 0
    y: 0
  glyph_offset:
    x: 0
    y: 0

draw_bold_text_with_bright_colors: true

schemes:
  nord-dark: &nord-dark
    primary:
      background: '#1d1f21'
      foreground: '#c5c8c6'  
    normal:
      black:   '#1d1f21'
      red:     '#cc6666'
      green:   '#b5bd68'
      yellow:  '#f0c674'
      blue:    '#81a2be'
      magenta: '#b294bb'
      cyan:    '#8abeb7'
      white:   '#c5c8c6'
    bright:
      black:   '#666666'
      red:     '#d54e53'
      green:   '#b9ca4a'
      yellow:  '#e7c547'
      blue:    '#7aa6da'
      magenta: '#c397d8'
      cyan:    '#70c0b1'
      white:   '#eaeaea'
    dim:
      black:   '#131415'
      red:     '#864343'
      green:   '#777c44'
      yellow:  '#9e824c'
      blue:    '#556a7d'
      magenta: '#75617b'
      cyan:    '#5b7d78'
      white:   '#828482'
      
  breeze: &breeze
    primary:
      background:        '0x232627'
      foreground:        '0xfcfcfc'
      dim_foreground:    '0xeff0f1'
      bright_foreground: '0xffffff'
      dim_background:    '0x31363b'
      bright_background: '0x000000'
    normal:
      black:             '0x232627'
      red:               '0xed1515'
      green:             '0x11d116'
      yellow:            '0xf67400'
      blue:              '0x1d99f3'
      magenta:           '0x9b59b6'
      cyan:              '0x1abc9c'
      white:             '0xfcfcfc'
    bright:
      black:             '0x7f8c8d'
      red:               '0xc0392b'
      green:             '0x1cdc9a'
      yellow:            '0xfdbc4b'
      blue:              '0x3daee9'
      magenta:           '0x8e44ad'
      cyan:              '0x16a085'
      white:             '0xffffff'
    dim:
      black:             '0x31363b'
      red:               '0x783228'
      green:             '0x17a262'
      yellow:            '0xb65619'
      blue:              '0x1b668f'
      magenta:           '0x614a73'
      cyan:              '0x186c60'
      white:             '0x63686d'
      
  tango: &tango
    primary:
      background: '0x2e3436'
      foreground: '0xd3d7cf'    
    normal:
      black: '0x2e3436'
      red: '0xcc0000'
      green: '0x4e9a06'
      yellow: '0xc4a000'
      blue: '0x3465a4'
      magenta: '0x75507b'
      cyan: '0x06989a'
      white: '0xd3d7cf'
    bright:
      black: '0x555753'
      red: '0xef2929'
      green: '0x8ae234'
      yellow: '0xfce94f'
      blue: '0x729fcf'
      magenta: '0xad7fa8'
      cyan: '0x34e2e2'
      white: '0xeeeeec'
      
  google-dark: &google-dark
    primary:
      background: '0x1d1f21'
      foreground: '0xc5c8c6'
    normal:
      black:   '0x1d1f21'
      red:     '0xcc342b'
      green:   '0x198844'
      yellow:  '0xfba922'
      blue:    '0x3971ed'
      magenta: '0xa36ac7'
      cyan:    '0x3971ed'
      white:   '0xc5c8c6'
    bright:
      black:   '0x969896'
      red:     '0xcc342b'
      green:   '0x198844'
      yellow:  '0xfba922'
      blue:    '0x3971ed'
      magenta: '0xa36ac7'
      cyan:    '0x3971ed'
      white:   '0xffffff'
      
  codeschool-dark: &codeschool-dark
    primary:
      background: '0x232c31'
      foreground: '0x9ea7a6'
    normal:
      black:   '0x232c31'
      red:     '0x2a5491'
      green:   '0x237986'
      yellow:  '0xa03b1e'
      blue:    '0x484d79'
      magenta: '0xc59820'
      cyan:    '0xb02f30'
      white:   '0x9ea7a6'
    bright:
      black:   '0x3f4944'
      red:     '0x2a5491'
      green:   '0x237986'
      yellow:  '0xa03b1e'
      blue:    '0x484d79'
      magenta: '0xc59820'
      cyan:    '0xb02f30'
      white:   '0xb5d8f6'
  
  kasugano: &kasugano
    primary:
      background: '0x1b1b1b'
      foreground: '0xffffff'
    normal:
      black:   '0x3d3d3d'
      red:     '0x6673bf'
      green:   '0x3ea290'
      yellow:  '0xb0ead9'
      blue:    '0x31658c'
      magenta: '0x596196'
      cyan:    '0x8292b2'
      white:   '0xc8cacc'
    bright:
      black:   '0x4d4d4d'
      red:     '0x899aff'
      green:   '0x52ad91'
      yellow:  '0x98c9bb'
      blue:    '0x477ab3'
      magenta: '0x7882bf'
      cyan:    '0x95a7cc'
      white:   '0xedeff2'
  
  doomicide: &doomicide
    primary:
      background: '0x000000'
      foreground: '0xffffff'
    normal:
      black:   '0x000000'
      red:     '0x571dc2'
      green:   '0x14db49'
      yellow:  '0x403d70'
      blue:    '0x385a70'
      magenta: '0x384894'
      cyan:    '0x4f3a5e'
      white:   '0x999999'
    bright:
      black:   '0x38372c'
      red:     '0x7c54b0'
      green:   '0xa2e655'
      yellow:  '0x9c6f59'
      blue:    '0x323f5c'
      magenta: '0x5e6c99'
      cyan:    '0x667d77'
      white:   '0xffffff'

  gslob-nature-suede: &gslob-nature-suede
    primary:
      background: '0x170f0d'
      foreground: '0x746c48'
    normal:
      black:   '0x392925'
      red:     '0x98724c'
      green:   '0x908f32'
      yellow:  '0xaa964c'
      blue:    '0x7b854e'
      magenta: '0x6b5644'
      cyan:    '0x5c5142'
      white:   '0xc8b55b'
    bright:
      black:   '0x544b2e'
      red:     '0xaf652f'
      green:   '0xc3c13d'
      yellow:  '0xc8b55b'
      blue:    '0x70a16c'
      magenta: '0x98724c'
      cyan:    '0x778725'
      white:   '0xe4dc8c'
  
  muse: &muse
    primary:
      background: '0x000000'
      foreground: '0xffffff'
    normal:
      black:   '0x2e3436'
      red:     '0xa31604'
      green:   '0x447241'
      yellow:  '0xc1951a'
      blue:    '0x425387'
      magenta: '0x965d98'
      cyan:    '0x06989a'
      white:   '0xd3d7cf'
    bright:
      black:   '0x555753'
      red:     '0xc60001'
      green:   '0x27a343'
      yellow:  '0xd5a30e'
      blue:    '0x4a5a8d'
      magenta: '0x893c8c'
      cyan:    '0x12bccb'
      white:   '0xeeeeec'
  
  jwl-dark: &jwl-dark
    primary:
      background: '0x000000'
      foreground: '0xffffff'
    normal:
      black:   '0x333333'
      red:     '0x8c4665'
      green:   '0x287373'
      yellow:  '0x7c7c99'
      blue:    '0x395573'
      magenta: '0x5e468c'
      cyan:    '0x31658c'
      white:   '0x899ca1'
    bright:
      black:   '0x3d3d3d'
      red:     '0xbf4d80'
      green:   '0x53a6a6'
      yellow:  '0x9e9ecb'
      blue:    '0x477ab3'
      magenta: '0x7e62b3'
      cyan:    '0x6096bf'
      white:   '0xc0c0c0'
      
  nudge: &nudge
    primary:
      background: '0x000000'
      foreground: '0xffffff'
    normal:
      black:   '0x658280'
      red:     '0x822f5d'
      green:   '0x184a31'
      yellow:  '0x9d4500'
      blue:    '0x304465'
      magenta: '0x330801'
      cyan:    '0x175552'
      white:   '0x110005'
    bright:
      black:   '0x8ca8a6'
      red:     '0xa24b76'
      green:   '0x28634d'
      yellow:  '0x9d5823'
      blue:    '0x415c77'
      magenta: '0x532706'
      cyan:    '0x3a6868'
      white:   '0x330801'

  dracula: &dracula
    primary:
      background: '0x282a36'
      foreground: '0xf8f8f2'
    normal:
      black:   '0x000000'
      red:     '0xff5555'
      green:   '0x50fa7b'
      yellow:  '0xf1fa8c'
      blue:    '0xbd93f9'
      magenta: '0xff79c6'
      cyan:    '0x8be9fd'
      white:   '0xbbbbbb'
    bright:
      black:   '0x555555'
      red:     '0xff5555'
      green:   '0x50fa7b'
      yellow:  '0xf1fa8c'
      blue:    '0xcaa9fa'
      magenta: '0xff79c6'
      cyan:    '0x8be9fd'
      white:   '0xffffff'
 
  cyperpunk: &cyberpunk
    primary:
      background: "0x000b1e"
      foreground: "0x0abdc6"
    normal:
      black:   "0x123e7c"
      red:     "0xff0000"
      green:   "0xd300c4"
      yellow:  "0xf57800"
      blue:    "0x123e7c"
      magenta: "0x711c91"
      cyan:    "0x0abdc6"
      white:   "0xd7d7d5"
    bright:
      black:   "0x1c61c2"
      red:     "0xff0000"
      green:   "0xd300c4"
      yellow:  "0xf57800"
      blue:    "0x00ff00"
      magenta: "0x711c91"
      cyan:    "0x0abdc6"
      white:   "0xd7d7d5"

# Following color schmemes are currently available:
# nord-dark           breeze      tango     google-dark
# codeschool-dark     kasugano    doomicide gslob-nature-suede
# muse                jwl-dark    nudge		dracula
# cyberpunk
colors: *muse

cursor:
  style:
    # Values for `shape`:
    #   - â–‡ Block
    #   - _ Underline
    #   - | Beam
    shape: Underline
    
    # Values for `blinking`:
    #   - Never: Prevent the cursor from ever blinking
    #   - Off: Disable blinking by default
    #   - On: Enable blinking by default
    #   - Always: Force the cursor to always blink
    blinking: Always

live_config_reload: true

# Regex hints
#
# Terminal hints can be used to find text in the visible part of the terminal
# and pipe it to other applications.
#hints:
  # Keys used for the hint labels.
  #alphabet: "jfkdls;ahgurieowpq"

  # List with all available hints
  #
  # Each hint must have a `regex` and either an `action` or a `command` field.
  # The fields `mouse`, `binding` and `post_processing` are optional.
  #
  # The fields `command`, `binding.key`, `binding.mods`, `binding.mode` and
  # `mouse.mods` accept the same values as they do in the `key_bindings` section.
  #
  # The `mouse.enabled` field controls if the hint should be underlined while
  # the mouse with all `mouse.mods` keys held or the vi mode cursor is above it.
  #
  # If the `post_processing` field is set to `true`, heuristics will be used to
  # shorten the match if there are characters likely not to be part of the hint
  # (e.g. a trailing `.`). This is most useful for URIs.
  #
  # Values for `action`:
  #   - Copy
  #       Copy the hint's text to the clipboard.
  #   - Paste
  #       Paste the hint's text to the terminal or search.
  #   - Select
  #       Select the hint's text.
  #   - MoveViModeCursor
  #       Move the vi mode cursor to the beginning of the hint.
  #enabled:
  # - regex: "(ipfs:|ipns:|magnet:|mailto:|gemini:|gopher:|https:|http:|news:|file:|git:|ssh:|ftp:)\
  #           [^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^âŸ¨âŸ©`]+"
  #   command: xdg-open
  #   post_processing: true
  #   mouse:
  #     enabled: true
  #     mods: None
  #   binding:
  #     key: U
  #     mods: Control|Shift

# Mouse bindings
#
# Mouse bindings are specified as a list of objects, much like the key
# bindings further below.
#
# To trigger mouse bindings when an application running within Alacritty
# captures the mouse, the `Shift` modifier is automatically added as a
# requirement.
#
# Each mouse binding will specify a:
#
# - `mouse`:
#
#   - Middle
#   - Left
#   - Right
#   - Numeric identifier such as `5`
#
# - `action` (see key bindings for actions not exclusive to mouse mode)
#
# - Mouse exclusive actions:
#
#   - ExpandSelection
#       Expand the selection to the current mouse cursor location.
#
# And optionally:
#
# - `mods` (see key bindings)
#mouse_bindings:
#  - { mouse: Right,             action: ExpandSelection }
#  - { mouse: Middle, mode: ~Vi, action: PasteSelection  }

# Key bindings
#
# Key bindings are specified as a list of objects. For example, this is the
# default paste binding:
#
# `- { key: V, mods: Control|Shift, action: Paste }`
#
# Each key binding will specify a:
#
# - `key`: Identifier of the key pressed
#
#    - A-Z
#    - F1-F24
#    - Key0-Key9
#
#    A full list with available key codes can be found here:
#    https://docs.rs/glutin/*/glutin/event/enum.VirtualKeyCode.html#variants
#
#    Instead of using the name of the keys, the `key` field also supports using
#    the scancode of the desired key. Scancodes have to be specified as a
#    decimal number. This command will allow you to display the hex scancodes
#    for certain keys:
#
#       `showkey --scancodes`.
#
# Then exactly one of:
#
# - `chars`: Send a byte sequence to the running application
#
#    The `chars` field writes the specified string to the terminal. This makes
#    it possible to pass escape sequences. To find escape codes for bindings
#    like `PageUp` (`"\x1b[5~"`), you can run the command `showkey -a` outside
#    of tmux. Note that applications use terminfo to map escape sequences back
#    to keys. It is therefore required to update the terminfo when changing an
#    escape sequence.
#
# - `action`: Execute a predefined action
#
#   - ToggleViMode
#   - SearchForward
#       Start searching toward the right of the search origin.
#   - SearchBackward
#       Start searching toward the left of the search origin.
#   - Copy
#   - Paste
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollHalfPageUp
#   - ScrollHalfPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#       Remove the terminal's scrollback history.
#   - Hide
#       Hide the Alacritty window.
#   - Minimize
#       Minimize the Alacritty window.
#   - Quit
#       Quit Alacritty.
#   - ToggleFullscreen
#   - SpawnNewInstance
#       Spawn a new instance of Alacritty.
#   - CreateNewWindow
#       Create a new Alacritty window from the current process.
#   - ClearLogNotice
#       Clear Alacritty's UI warning and error notice.
#   - ClearSelection
#       Remove the active selection.
#   - ReceiveChar
#   - None
#
# - Vi mode exclusive actions:
#
#   - Open
#       Perform the action of the first matching hint under the vi mode cursor
#       with `mouse.enabled` set to `true`.
#   - ToggleNormalSelection
#   - ToggleLineSelection
#   - ToggleBlockSelection
#   - ToggleSemanticSelection
#       Toggle semantic selection based on `selection.semantic_escape_chars`.
#
# - Vi mode exclusive cursor motion actions:
#
#   - Up
#       One line up.
#   - Down
#       One line down.
#   - Left
#       One character left.
#   - Right
#       One character right.
#   - First
#       First column, or beginning of the line when already at the first column.
#   - Last
#       Last column, or beginning of the line when already at the last column.
#   - FirstOccupied
#       First non-empty cell in this terminal row, or first non-empty cell of
#       the line when already at the first cell of the row.
#   - High
#       Top of the screen.
#   - Middle
#       Center of the screen.
#   - Low
#       Bottom of the screen.
#   - SemanticLeft
#       Start of the previous semantically separated word.
#   - SemanticRight
#       Start of the next semantically separated word.
#   - SemanticLeftEnd
#       End of the previous semantically separated word.
#   - SemanticRightEnd
#       End of the next semantically separated word.
#   - WordLeft
#       Start of the previous whitespace separated word.
#   - WordRight
#       Start of the next whitespace separated word.
#   - WordLeftEnd
#       End of the previous whitespace separated word.
#   - WordRightEnd
#       End of the next whitespace separated word.
#   - Bracket
#       Character matching the bracket at the cursor's location.
#   - SearchNext
#       Beginning of the next match.
#   - SearchPrevious
#       Beginning of the previous match.
#   - SearchStart
#       Start of the match to the left of the vi mode cursor.
#   - SearchEnd
#       End of the match to the right of the vi mode cursor.
#
# - Search mode exclusive actions:
#   - SearchFocusNext
#       Move the focus to the next search match.
#   - SearchFocusPrevious
#       Move the focus to the previous search match.
#   - SearchConfirm
#   - SearchCancel
#   - SearchClear
#       Reset the search regex.
#   - SearchDeleteWord
#       Delete the last word in the search regex.
#   - SearchHistoryPrevious
#       Go to the previous regex in the search history.
#   - SearchHistoryNext
#       Go to the next regex in the search history.
#
# - macOS exclusive actions:
#   - ToggleSimpleFullscreen
#       Enter fullscreen without occupying another space.
#
# - Linux/BSD exclusive actions:
#
#   - CopySelection
#       Copy from the selection buffer.
#   - PasteSelection
#       Paste from the selection buffer.
#
# - `command`: Fork and execute a specified command plus arguments
#
#    The `command` field must be a map containing a `program` string and an
#    `args` array of command line parameter strings. For example:
#       `{ program: "alacritty", args: ["-e", "vttest"] }`
#
# And optionally:
#
# - `mods`: Key modifiers to filter binding actions
#
#    - Command
#    - Control
#    - Option
#    - Super
#    - Shift
#    - Alt
#
#    Multiple `mods` can be combined using `|` like this:
#       `mods: Control|Shift`.
#    Whitespace and capitalization are relevant and must match the example.
#
# - `mode`: Indicate a binding for only specific terminal reported modes
#
#    This is mainly used to send applications the correct escape sequences
#    when in different modes.
#
#    - AppCursor
#    - AppKeypad
#    - Search
#    - Alt
#    - Vi
#
#    A `~` operator can be used before a mode to apply the binding whenever
#    the mode is *not* active, e.g. `~Alt`.
#
# Bindings are always filled by default, but will be replaced when a new
# binding with the same triggers is defined. To unset a default binding, it can
# be mapped to the `ReceiveChar` action. Alternatively, you can use `None` for
# a no-op if you do not wish to receive input characters for that binding.
#
# If the same trigger is assigned to multiple actions, all of them are executed
# in the order they were defined in.
#key_bindings:
  #- { key: Paste,                                       action: Paste          }
  #- { key: Copy,                                        action: Copy           }
  #- { key: L,         mods: Control,                    action: ClearLogNotice }
  #- { key: L,         mods: Control, mode: ~Vi|~Search, chars: "\x0c"          }
  #- { key: PageUp,    mods: Shift,   mode: ~Alt,        action: ScrollPageUp,  }
  #- { key: PageDown,  mods: Shift,   mode: ~Alt,        action: ScrollPageDown }
  #- { key: Home,      mods: Shift,   mode: ~Alt,        action: ScrollToTop,   }
  #- { key: End,       mods: Shift,   mode: ~Alt,        action: ScrollToBottom }

  # Vi Mode
  #- { key: Space,  mods: Shift|Control, mode: ~Search,    action: ToggleViMode            }
  #- { key: Space,  mods: Shift|Control, mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: Escape,                      mode: Vi|~Search, action: ClearSelection          }
  #- { key: I,                           mode: Vi|~Search, action: ToggleViMode            }
  #- { key: I,                           mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: C,      mods: Control,       mode: Vi|~Search, action: ToggleViMode            }
  #- { key: Y,      mods: Control,       mode: Vi|~Search, action: ScrollLineUp            }
  #- { key: E,      mods: Control,       mode: Vi|~Search, action: ScrollLineDown          }
  #- { key: G,                           mode: Vi|~Search, action: ScrollToTop             }
  #- { key: G,      mods: Shift,         mode: Vi|~Search, action: ScrollToBottom          }
  #- { key: B,      mods: Control,       mode: Vi|~Search, action: ScrollPageUp            }
  #- { key: F,      mods: Control,       mode: Vi|~Search, action: ScrollPageDown          }
  #- { key: U,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageUp        }
  #- { key: D,      mods: Control,       mode: Vi|~Search, action: ScrollHalfPageDown      }
  #- { key: Y,                           mode: Vi|~Search, action: Copy                    }
  #- { key: Y,                           mode: Vi|~Search, action: ClearSelection          }
  #- { key: Copy,                        mode: Vi|~Search, action: ClearSelection          }
  #- { key: V,                           mode: Vi|~Search, action: ToggleNormalSelection   }
  #- { key: V,      mods: Shift,         mode: Vi|~Search, action: ToggleLineSelection     }
  #- { key: V,      mods: Control,       mode: Vi|~Search, action: ToggleBlockSelection    }
  #- { key: V,      mods: Alt,           mode: Vi|~Search, action: ToggleSemanticSelection }
  #- { key: Return,                      mode: Vi|~Search, action: Open                    }
  #- { key: K,                           mode: Vi|~Search, action: Up                      }
  #- { key: J,                           mode: Vi|~Search, action: Down                    }
  #- { key: H,                           mode: Vi|~Search, action: Left                    }
  #- { key: L,                           mode: Vi|~Search, action: Right                   }
  #- { key: Up,                          mode: Vi|~Search, action: Up                      }
  #- { key: Down,                        mode: Vi|~Search, action: Down                    }
  #- { key: Left,                        mode: Vi|~Search, action: Left                    }
  #- { key: Right,                       mode: Vi|~Search, action: Right                   }
  #- { key: Key0,                        mode: Vi|~Search, action: First                   }
  #- { key: Key4,   mods: Shift,         mode: Vi|~Search, action: Last                    }
  #- { key: Key6,   mods: Shift,         mode: Vi|~Search, action: FirstOccupied           }
  #- { key: H,      mods: Shift,         mode: Vi|~Search, action: High                    }
  #- { key: M,      mods: Shift,         mode: Vi|~Search, action: Middle                  }
  #- { key: L,      mods: Shift,         mode: Vi|~Search, action: Low                     }
  #- { key: B,                           mode: Vi|~Search, action: SemanticLeft            }
  #- { key: W,                           mode: Vi|~Search, action: SemanticRight           }
  #- { key: E,                           mode: Vi|~Search, action: SemanticRightEnd        }
  #- { key: B,      mods: Shift,         mode: Vi|~Search, action: WordLeft                }
  #- { key: W,      mods: Shift,         mode: Vi|~Search, action: WordRight               }
  #- { key: E,      mods: Shift,         mode: Vi|~Search, action: WordRightEnd            }
  #- { key: Key5,   mods: Shift,         mode: Vi|~Search, action: Bracket                 }
  #- { key: Slash,                       mode: Vi|~Search, action: SearchForward           }
  #- { key: Slash,  mods: Shift,         mode: Vi|~Search, action: SearchBackward          }
  #- { key: N,                           mode: Vi|~Search, action: SearchNext              }
  #- { key: N,      mods: Shift,         mode: Vi|~Search, action: SearchPrevious          }

  # Search Mode
  #- { key: Return,                mode: Search|Vi,  action: SearchConfirm         }
  #- { key: Escape,                mode: Search,     action: SearchCancel          }
  #- { key: C,      mods: Control, mode: Search,     action: SearchCancel          }
  #- { key: U,      mods: Control, mode: Search,     action: SearchClear           }
  #- { key: W,      mods: Control, mode: Search,     action: SearchDeleteWord      }
  #- { key: P,      mods: Control, mode: Search,     action: SearchHistoryPrevious }
  #- { key: N,      mods: Control, mode: Search,     action: SearchHistoryNext     }
  #- { key: Up,                    mode: Search,     action: SearchHistoryPrevious }
  #- { key: Down,                  mode: Search,     action: SearchHistoryNext     }
  #- { key: Return,                mode: Search|~Vi, action: SearchFocusNext       }
  #- { key: Return, mods: Shift,   mode: Search|~Vi, action: SearchFocusPrevious   }

  # (Windows, Linux, and BSD only)
  #- { key: V,              mods: Control|Shift, mode: ~Vi,        action: Paste            }
  #- { key: C,              mods: Control|Shift,                   action: Copy             }
  #- { key: F,              mods: Control|Shift, mode: ~Search,    action: SearchForward    }
  #- { key: B,              mods: Control|Shift, mode: ~Search,    action: SearchBackward   }
  #- { key: C,              mods: Control|Shift, mode: Vi|~Search, action: ClearSelection   }
  #- { key: Insert,         mods: Shift,                           action: PasteSelection   }
  #- { key: Key0,           mods: Control,                         action: ResetFontSize    }
  #- { key: Equals,         mods: Control,                         action: IncreaseFontSize }
  #- { key: Plus,           mods: Control,                         action: IncreaseFontSize }
  #- { key: NumpadAdd,      mods: Control,                         action: IncreaseFontSize }
  #- { key: Minus,          mods: Control,                         action: DecreaseFontSize }
  #- { key: NumpadSubtract, mods: Control,                         action: DecreaseFontSize }

  # (Windows only)
  #- { key: Return,   mods: Alt,           action: ToggleFullscreen }

  # (macOS only)
  #- { key: K,              mods: Command, mode: ~Vi|~Search, chars: "\x0c"                 }
  #- { key: K,              mods: Command, mode: ~Vi|~Search, action: ClearHistory          }
  #- { key: Key0,           mods: Command,                    action: ResetFontSize         }
  #- { key: Equals,         mods: Command,                    action: IncreaseFontSize      }
  #- { key: Plus,           mods: Command,                    action: IncreaseFontSize      }
  #- { key: NumpadAdd,      mods: Command,                    action: IncreaseFontSize      }
  #- { key: Minus,          mods: Command,                    action: DecreaseFontSize      }
  #- { key: NumpadSubtract, mods: Command,                    action: DecreaseFontSize      }
  #- { key: V,              mods: Command,                    action: Paste                 }
  #- { key: C,              mods: Command,                    action: Copy                  }
  #- { key: C,              mods: Command, mode: Vi|~Search,  action: ClearSelection        }
  #- { key: H,              mods: Command,                    action: Hide                  }
  #- { key: H,              mods: Command|Alt,                action: HideOtherApplications }
  #- { key: M,              mods: Command,                    action: Minimize              }
  #- { key: Q,              mods: Command,                    action: Quit                  }
  #- { key: W,              mods: Command,                    action: Quit                  }
  #- { key: N,              mods: Command,                    action: SpawnNewInstance      }
  #- { key: F,              mods: Command|Control,            action: ToggleFullscreen      }
  #- { key: F,              mods: Command, mode: ~Search,     action: SearchForward         }
  #- { key: B,              mods: Command, mode: ~Search,     action: SearchBackward        }

#debug:
  # Display the time it takes to redraw each frame.
  #render_timer: false

  # Keep the log file after quitting Alacritty.
  #persistent_logging: false

  # Log level
  #
  # Values for `log_level`:
  #   - Off
  #   - Error
  #   - Warn
  #   - Info
  #   - Debug
  #   - Trace
  #log_level: Warn

  # Print all received window events.
  #print_events: false
  #
